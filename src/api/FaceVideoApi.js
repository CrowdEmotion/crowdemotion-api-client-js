/**
 * CloudEmotion API v1
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FaceVideo', 'model/FaceVideoUpload'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/FaceVideo'), require('../model/FaceVideoUpload'));
  } else {
    // Browser globals (root is window)
    if (!root.CrowdemotionApiClientJs) {
      root.CrowdemotionApiClientJs = {};
    }
    root.CrowdemotionApiClientJs.FaceVideoApi = factory(root.CrowdemotionApiClientJs.ApiClient, root.CrowdemotionApiClientJs.FaceVideo, root.CrowdemotionApiClientJs.FaceVideoUpload);
  }
}(this, function(ApiClient, FaceVideo, FaceVideoUpload) {
  'use strict';

  /**
   * FaceVideo service.
   * @module api/FaceVideoApi
   * @version 1.1.0
   */

  /**
   * Constructs a new FaceVideoApi. 
   * @alias module:api/FaceVideoApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the facevideoFacevideoIdDelete operation.
     * @callback module:api/FaceVideoApi~facevideoFacevideoIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a FaceVideo
     * &lt;p&gt;Use this operation to delete a FaceVideo.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✗ Respondent ✗ Customer ✓ Manager&lt;/p&gt;
     * @param {Integer} facevideoId ID of FaceVideo to be deleted.
     * @param {module:api/FaceVideoApi~facevideoFacevideoIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'String'}
     */
    this.facevideoFacevideoIdDelete = function(facevideoId, callback) {
      var postBody = null;

      // verify the required parameter 'facevideoId' is set
      if (facevideoId == undefined || facevideoId == null) {
        throw "Missing the required parameter 'facevideoId' when calling facevideoFacevideoIdDelete";
      }


      var pathParams = {
        'facevideo_id': facevideoId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/facevideo/{facevideo_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the facevideoGet operation.
     * @callback module:api/FaceVideoApi~facevideoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FaceVideo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a FaceVideo
     * &lt;p&gt;Use this operation to access information about the FaceVideo analysis.&lt;/p&gt; &lt;p&gt;&lt;i&gt;Any one of the two parameters must be specified.&lt;/i&gt;&lt;/p&gt; &lt;p&gt;To discover if the video has been analyzed, check the meaning of status field in the following table:&lt;/p&gt; &lt;table&gt;   &lt;tr&gt;&lt;td&gt;Value&lt;/td&gt; &lt;td&gt;Description&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;0&lt;/td&gt; &lt;td&gt;Not started&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;1&lt;/td&gt; &lt;td&gt;Processing started&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;2&lt;/td&gt; &lt;td&gt;Processing completed&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;-1&lt;/td&gt; &lt;td&gt;Error&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✓ Respondent ✓ Customer ✓ Manager&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.facevideoId FaceVideo ID. NOTE: Only this parameter is considered if both are specified.
     * @param {Integer} opts.responseId Response ID corresponding to the FaceVideo.
     * @param {module:api/FaceVideoApi~facevideoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/FaceVideo}
     */
    this.facevideoGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'facevideo_id': opts['facevideoId'],
        'response_id': opts['responseId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FaceVideo;

      return this.apiClient.callApi(
        '/facevideo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the facevideoPost operation.
     * @callback module:api/FaceVideoApi~facevideoPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FaceVideo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyse FaceVideo
     * &lt;p&gt;Starts the analysis of a single FaceVideo (in the supported formats) through either:&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;a video URL pointing to a resource accessible through the Internet without authentication&lt;/li&gt;   &lt;li&gt;the binary contents of the video in the request&#39;s body, encoded as &lt;code&gt;multipart/form-data&lt;/code&gt; content type&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The third option is a &lt;code&gt;PUT&lt;/code&gt; call to &lt;code&gt;/v1/facevideo/{filename}&lt;/code&gt; (&lt;code&gt;filename&lt;/code&gt; required string e.g. &lt;code&gt;facevideo1.mp4&lt;/code&gt;) which supports all the URL parameters as above with a body encoding &lt;code&gt;application/octet-stream&lt;/code&gt; and the file contents as plain binary: this call makes uploads more efficient but it does not respect HTTP/RESTful standards so it may be not supported in future.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✓ Respondent ✓ Customer ✓ Manager&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {File} opts.filename FaceVideo to be analysed.
     * @param {Boolean} opts.sandbox Generates random data for testing, at no cost. Default: false.
     * @param {Integer} opts.responseId Associates this Facevideo to a previously generated Response.
     * @param {Integer} opts.researchId Associates this Facevideo to a previously generated Research.
     * @param {Integer} opts.mediaId Associates this Facevideo to a previously generated Media.
     * @param {Integer} opts.respondentId Associates this Facevideo to a previously generated Respondent.
     * @param {Boolean} opts.processVideo Actually processes the video. Default: true.
     * @param {module:api/FaceVideoApi~facevideoPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/FaceVideo}
     */
    this.facevideoPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'sandbox': opts['sandbox'],
        'response_id': opts['responseId'],
        'research_id': opts['researchId'],
        'media_id': opts['mediaId'],
        'respondent_id': opts['respondentId'],
        'processVideo': opts['processVideo']
      };
      var headerParams = {
      };
      var formParams = {
        'filename': opts['filename']
      };

      var authNames = ['api_key'];
      var contentTypes = ['multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = FaceVideo;

      return this.apiClient.callApi(
        '/facevideo', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the facevideoPut operation.
     * @callback module:api/FaceVideoApi~facevideoPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FaceVideo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Analyse FaceVideo
     * &lt;p&gt;Starts the analysis of a single FaceVideo (in the supported formats) through either:&lt;/p&gt; &lt;ol&gt;   &lt;li&gt;a video URL pointing to a resource accessible through the Internet without authentication&lt;/li&gt;   &lt;li&gt;the binary contents of the video in the request&#39;s body, encoded as &lt;code&gt;multipart/form-data&lt;/code&gt; content type&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The third option is a &lt;code&gt;PUT&lt;/code&gt; call to &lt;code&gt;/v1/facevideo/{filename}&lt;/code&gt; (&lt;code&gt;filename&lt;/code&gt; required string e.g. &lt;code&gt;facevideo1.mp4&lt;/code&gt;) which supports all the URL parameters as above with a body encoding &lt;code&gt;application/octet-stream&lt;/code&gt; and the file contents as plain binary: this call makes uploads more efficient but it does not respect HTTP/RESTful standards so it may be not supported in future.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✓ Respondent ✓ Customer ✓ Manager&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.sandbox Generates random data for testing, at no cost. Default: false.
     * @param {Integer} opts.responseId Associates this Facevideo to a previously generated Response.
     * @param {Integer} opts.researchId Associates this Facevideo to a previously generated Research.
     * @param {Integer} opts.mediaId Associates this Facevideo to a previously generated Media.
     * @param {Integer} opts.respondentId Associates this Facevideo to a previously generated Respondent.
     * @param {Boolean} opts.processVideo Actually processes the video. Default: true.
     * @param {module:model/FaceVideoUpload} opts.body Request body
     * @param {module:api/FaceVideoApi~facevideoPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/FaceVideo}
     */
    this.facevideoPut = function(opts, callback) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'sandbox': opts['sandbox'],
        'response_id': opts['responseId'],
        'research_id': opts['researchId'],
        'media_id': opts['mediaId'],
        'respondent_id': opts['respondentId'],
        'processVideo': opts['processVideo']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FaceVideo;

      return this.apiClient.callApi(
        '/facevideo', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
