/**
 * CloudEmotion API v1
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Timeseries'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Timeseries'));
  } else {
    // Browser globals (root is window)
    if (!root.CrowdemotionApiClientJs) {
      root.CrowdemotionApiClientJs = {};
    }
    root.CrowdemotionApiClientJs.TimeseriesApi = factory(root.CrowdemotionApiClientJs.ApiClient, root.CrowdemotionApiClientJs.Timeseries);
  }
}(this, function(ApiClient, Timeseries) {
  'use strict';

  /**
   * Timeseries service.
   * @module api/TimeseriesApi
   * @version 1.1.0
   */

  /**
   * Constructs a new TimeseriesApi. 
   * @alias module:api/TimeseriesApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the timeseriesDelete operation.
     * @callback module:api/TimeseriesApi~timeseriesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Timeseries
     * &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✗ Respondent ✗ Customer ✓ Manager&lt;/p&gt;
     * @param {Integer} responseId ID of the Response associated to the TimeSeries.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.metricId ID of the Metric of the Timeseries to be deleted.
     * @param {module:api/TimeseriesApi~timeseriesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {'String'}
     */
    this.timeseriesDelete = function(responseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'responseId' is set
      if (responseId == undefined || responseId == null) {
        throw "Missing the required parameter 'responseId' when calling timeseriesDelete";
      }


      var pathParams = {
      };
      var queryParams = {
        'response_id': responseId,
        'metric_id': opts['metricId']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/timeseries', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the timeseriesGet operation.
     * @callback module:api/TimeseriesApi~timeseriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Timeseries>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all recorded timeseries for a Response
     * &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✓ Respondent ✗ Customer ✓ Manager&lt;/p&gt;
     * @param {Integer} responseId ID of the Response associated to the TimeSeries.
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.metricId ID of the Metric associated to the TimeSeries.
     * @param {Boolean} opts.normalize Return data beetwen 0 and 1. Default: false.
     * @param {String} opts.format If value is &#39;csv&#39; then data is passed back in CSV format insted of the default time-series format. Example: csv.
     * @param {module:api/TimeseriesApi~timeseriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Timeseries>}
     */
    this.timeseriesGet = function(responseId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'responseId' is set
      if (responseId == undefined || responseId == null) {
        throw "Missing the required parameter 'responseId' when calling timeseriesGet";
      }


      var pathParams = {
      };
      var queryParams = {
        'response_id': responseId,
        'metric_id': opts['metricId'],
        'normalize': opts['normalize'],
        'format': opts['format']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Timeseries];

      return this.apiClient.callApi(
        '/timeseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
