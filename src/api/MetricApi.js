/**
 * CloudEmotion API v1
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Metric', 'model/MetricCreation'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Metric'), require('../model/MetricCreation'));
  } else {
    // Browser globals (root is window)
    if (!root.CrowdemotionApiClientJs) {
      root.CrowdemotionApiClientJs = {};
    }
    root.CrowdemotionApiClientJs.MetricApi = factory(root.CrowdemotionApiClientJs.ApiClient, root.CrowdemotionApiClientJs.Metric, root.CrowdemotionApiClientJs.MetricCreation);
  }
}(this, function(ApiClient, Metric, MetricCreation) {
  'use strict';

  /**
   * Metric service.
   * @module api/MetricApi
   * @version 1.1.0
   */

  /**
   * Constructs a new MetricApi. 
   * @alias module:api/MetricApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the metricGet operation.
     * @callback module:api/MetricApi~metricGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Metric>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all registered metrics
     * &lt;p&gt;Metrics are linked to time-series and define their meaning.&lt;/p&gt; &lt;p&gt;Common metric ID are listed below:&lt;/p&gt; &lt;table&gt;   &lt;tr&gt;&lt;td&gt;id&lt;/td&gt;&lt;td&gt;Value&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Timestamp&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Neutral&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Happiness&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Surprise&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Puzzlement&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Disgust&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Fear&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Sadness&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✗ Respondent ✗ Customer ✓ Manager&lt;/p&gt;
     * @param {Object} opts Optional parameters
     * @param {Integer} opts.skip The number of results to skip.
     * @param {Integer} opts.limit The maximum number of results to return.
     * @param {String} opts.where JSON formatted string condition.
     * @param {String} opts.sort Attribute used to sort results.
     * @param {module:api/MetricApi~metricGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {Array.<module:model/Metric>}
     */
    this.metricGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'skip': opts['skip'],
        'limit': opts['limit'],
        'where': opts['where'],
        'sort': opts['sort']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Metric];

      return this.apiClient.callApi(
        '/metric', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricMetricIdDelete operation.
     * @callback module:api/MetricApi~metricMetricIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Metric
     * &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✗ Respondent ✗ Customer ✓ Manager&lt;/p&gt;
     * @param {Integer} metricId ID of Metric to be deleted.
     * @param {module:api/MetricApi~metricMetricIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Metric}
     */
    this.metricMetricIdDelete = function(metricId, callback) {
      var postBody = null;

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw "Missing the required parameter 'metricId' when calling metricMetricIdDelete";
      }


      var pathParams = {
        'metric_id': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/metric/{metric_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricMetricIdGet operation.
     * @callback module:api/MetricApi~metricMetricIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find a Metric
     * &lt;p&gt;Metrics are linked to time-series and define their meaning.&lt;/p&gt; &lt;p&gt;Common metric ID are listed below:&lt;/p&gt; &lt;table&gt;   &lt;tr&gt;&lt;td&gt;id&lt;/td&gt;&lt;td&gt;Value&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Timestamp&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Neutral&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Happiness&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Surprise&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Puzzlement&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Disgust&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Fear&lt;/td&gt;&lt;/tr&gt;   &lt;tr&gt;&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Sadness&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✗ Respondent ✗ Customer ✓ Manager&lt;/p&gt;
     * @param {Integer} metricId ID of Metric to find.
     * @param {module:api/MetricApi~metricMetricIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Metric}
     */
    this.metricMetricIdGet = function(metricId, callback) {
      var postBody = null;

      // verify the required parameter 'metricId' is set
      if (metricId == undefined || metricId == null) {
        throw "Missing the required parameter 'metricId' when calling metricMetricIdGet";
      }


      var pathParams = {
        'metric_id': metricId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/metric/{metric_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricPost operation.
     * @callback module:api/MetricApi~metricPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Metric} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Metric
     * &lt;p&gt;&lt;strong&gt;Permissions:&lt;/strong&gt; ✗ Respondent ✗ Customer ✓ Manager&lt;/p&gt;
     * @param {module:model/MetricCreation} body Request body
     * @param {module:api/MetricApi~metricPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {module:model/Metric}
     */
    this.metricPost = function(body, callback) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body == undefined || body == null) {
        throw "Missing the required parameter 'body' when calling metricPost";
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['api_key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Metric;

      return this.apiClient.callApi(
        '/metric', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
