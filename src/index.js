/**
 * CloudEmotion API v1
 * CrowdEmotion API
 *
 * OpenAPI spec version: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContentDetails', 'model/Data', 'model/FaceVideo', 'model/FaceVideoUpload', 'model/Login', 'model/LoginResponse', 'model/Media', 'model/MediaCreation', 'model/Metric', 'model/MetricCreation', 'model/Research', 'model/ResearchCreation', 'model/Respondent', 'model/RespondentMetadata', 'model/RespondentMetadataResponse', 'model/Response', 'model/ResponseCreation', 'model/ResponseMetadata', 'model/ResponseMetadataResponse', 'model/Statistics', 'model/Stats', 'model/Status', 'model/Tags', 'model/Timeseries', 'model/User', 'model/UserMetadata', 'model/UserMetadataResponse', 'model/UserUpdateBody', 'model/Videodetails', 'api/FaceVideoApi', 'api/MediaApi', 'api/MetricApi', 'api/ResearchApi', 'api/RespondentApi', 'api/ResponseApi', 'api/TimeseriesApi', 'api/UserApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/ContentDetails'), require('./model/Data'), require('./model/FaceVideo'), require('./model/FaceVideoUpload'), require('./model/Login'), require('./model/LoginResponse'), require('./model/Media'), require('./model/MediaCreation'), require('./model/Metric'), require('./model/MetricCreation'), require('./model/Research'), require('./model/ResearchCreation'), require('./model/Respondent'), require('./model/RespondentMetadata'), require('./model/RespondentMetadataResponse'), require('./model/Response'), require('./model/ResponseCreation'), require('./model/ResponseMetadata'), require('./model/ResponseMetadataResponse'), require('./model/Statistics'), require('./model/Stats'), require('./model/Status'), require('./model/Tags'), require('./model/Timeseries'), require('./model/User'), require('./model/UserMetadata'), require('./model/UserMetadataResponse'), require('./model/UserUpdateBody'), require('./model/Videodetails'), require('./api/FaceVideoApi'), require('./api/MediaApi'), require('./api/MetricApi'), require('./api/ResearchApi'), require('./api/RespondentApi'), require('./api/ResponseApi'), require('./api/TimeseriesApi'), require('./api/UserApi'));
  }
}(function(ApiClient, ContentDetails, Data, FaceVideo, FaceVideoUpload, Login, LoginResponse, Media, MediaCreation, Metric, MetricCreation, Research, ResearchCreation, Respondent, RespondentMetadata, RespondentMetadataResponse, Response, ResponseCreation, ResponseMetadata, ResponseMetadataResponse, Statistics, Stats, Status, Tags, Timeseries, User, UserMetadata, UserMetadataResponse, UserUpdateBody, Videodetails, FaceVideoApi, MediaApi, MetricApi, ResearchApi, RespondentApi, ResponseApi, TimeseriesApi, UserApi) {
  'use strict';

  /**
   * CrowdEmotion_API.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var CrowdemotionApiClientJs = require('index'); // See note below*.
   * var xxxSvc = new CrowdemotionApiClientJs.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new CrowdemotionApiClientJs.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new CrowdemotionApiClientJs.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new CrowdemotionApiClientJs.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.1.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The ContentDetails model constructor.
     * @property {module:model/ContentDetails}
     */
    ContentDetails: ContentDetails,
    /**
     * The Data model constructor.
     * @property {module:model/Data}
     */
    Data: Data,
    /**
     * The FaceVideo model constructor.
     * @property {module:model/FaceVideo}
     */
    FaceVideo: FaceVideo,
    /**
     * The FaceVideoUpload model constructor.
     * @property {module:model/FaceVideoUpload}
     */
    FaceVideoUpload: FaceVideoUpload,
    /**
     * The Login model constructor.
     * @property {module:model/Login}
     */
    Login: Login,
    /**
     * The LoginResponse model constructor.
     * @property {module:model/LoginResponse}
     */
    LoginResponse: LoginResponse,
    /**
     * The Media model constructor.
     * @property {module:model/Media}
     */
    Media: Media,
    /**
     * The MediaCreation model constructor.
     * @property {module:model/MediaCreation}
     */
    MediaCreation: MediaCreation,
    /**
     * The Metric model constructor.
     * @property {module:model/Metric}
     */
    Metric: Metric,
    /**
     * The MetricCreation model constructor.
     * @property {module:model/MetricCreation}
     */
    MetricCreation: MetricCreation,
    /**
     * The Research model constructor.
     * @property {module:model/Research}
     */
    Research: Research,
    /**
     * The ResearchCreation model constructor.
     * @property {module:model/ResearchCreation}
     */
    ResearchCreation: ResearchCreation,
    /**
     * The Respondent model constructor.
     * @property {module:model/Respondent}
     */
    Respondent: Respondent,
    /**
     * The RespondentMetadata model constructor.
     * @property {module:model/RespondentMetadata}
     */
    RespondentMetadata: RespondentMetadata,
    /**
     * The RespondentMetadataResponse model constructor.
     * @property {module:model/RespondentMetadataResponse}
     */
    RespondentMetadataResponse: RespondentMetadataResponse,
    /**
     * The Response model constructor.
     * @property {module:model/Response}
     */
    Response: Response,
    /**
     * The ResponseCreation model constructor.
     * @property {module:model/ResponseCreation}
     */
    ResponseCreation: ResponseCreation,
    /**
     * The ResponseMetadata model constructor.
     * @property {module:model/ResponseMetadata}
     */
    ResponseMetadata: ResponseMetadata,
    /**
     * The ResponseMetadataResponse model constructor.
     * @property {module:model/ResponseMetadataResponse}
     */
    ResponseMetadataResponse: ResponseMetadataResponse,
    /**
     * The Statistics model constructor.
     * @property {module:model/Statistics}
     */
    Statistics: Statistics,
    /**
     * The Stats model constructor.
     * @property {module:model/Stats}
     */
    Stats: Stats,
    /**
     * The Status model constructor.
     * @property {module:model/Status}
     */
    Status: Status,
    /**
     * The Tags model constructor.
     * @property {module:model/Tags}
     */
    Tags: Tags,
    /**
     * The Timeseries model constructor.
     * @property {module:model/Timeseries}
     */
    Timeseries: Timeseries,
    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User: User,
    /**
     * The UserMetadata model constructor.
     * @property {module:model/UserMetadata}
     */
    UserMetadata: UserMetadata,
    /**
     * The UserMetadataResponse model constructor.
     * @property {module:model/UserMetadataResponse}
     */
    UserMetadataResponse: UserMetadataResponse,
    /**
     * The UserUpdateBody model constructor.
     * @property {module:model/UserUpdateBody}
     */
    UserUpdateBody: UserUpdateBody,
    /**
     * The Videodetails model constructor.
     * @property {module:model/Videodetails}
     */
    Videodetails: Videodetails,
    /**
     * The FaceVideoApi service constructor.
     * @property {module:api/FaceVideoApi}
     */
    FaceVideoApi: FaceVideoApi,
    /**
     * The MediaApi service constructor.
     * @property {module:api/MediaApi}
     */
    MediaApi: MediaApi,
    /**
     * The MetricApi service constructor.
     * @property {module:api/MetricApi}
     */
    MetricApi: MetricApi,
    /**
     * The ResearchApi service constructor.
     * @property {module:api/ResearchApi}
     */
    ResearchApi: ResearchApi,
    /**
     * The RespondentApi service constructor.
     * @property {module:api/RespondentApi}
     */
    RespondentApi: RespondentApi,
    /**
     * The ResponseApi service constructor.
     * @property {module:api/ResponseApi}
     */
    ResponseApi: ResponseApi,
    /**
     * The TimeseriesApi service constructor.
     * @property {module:api/TimeseriesApi}
     */
    TimeseriesApi: TimeseriesApi,
    /**
     * The UserApi service constructor.
     * @property {module:api/UserApi}
     */
    UserApi: UserApi
  };

  return exports;
}));
